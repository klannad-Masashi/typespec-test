package {{ config.spring.base_package }}.controller;

import org.springframework.web.bind.annotation.*;
import javax.validation.Valid;
import java.util.List;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.LocalDate;
import java.util.UUID;
{% for enum in processed_enums %}
import {{ config.spring.base_package }}.entity.item.{{ enum.name }};
{% endfor %}

/**
 * {{ controller_name }}
 * TypeSpecから自動生成されたAPIコントローラー
 * 生成日時: {{ generated_at }}
 */
@RestController
public class {{ controller_name }} {

{% for usecase in processed_usecases %}
    private final {{ usecase.class_name }} {{ usecase.var_name }};
{% endfor %}

    public {{ controller_name }}(
        {%- for usecase in processed_usecases -%}
        {{ usecase.class_name }} {{ usecase.var_name }}
        {%- if not loop.last -%}, {% endif -%}
        {%- endfor -%}
    ) {
{% for usecase in processed_usecases %}
        this.{{ usecase.var_name }} = {{ usecase.var_name }};
{% endfor %}
    }

{% for endpoint in processed_endpoints %}
    @{{ endpoint.spring_method }}Mapping("{{ endpoint.path }}")
    public {{ endpoint.response_type }} {{ endpoint.method_name }}(
        {%- for path_param in endpoint.path_params -%}
        @PathVariable {{ path_param.type }} {{ path_param.name }}
        {%- if endpoint.query_params or endpoint.request_type -%}, {% endif -%}
        {%- endfor -%}
        {%- for query_param in endpoint.query_params -%}
        @RequestParam{% if not query_param.required %}(required = false){% endif %} {{ query_param.type }} {{ query_param.name }}
        {%- if not loop.last or endpoint.request_type -%}, {% endif -%}
        {%- endfor -%}
        {%- if endpoint.request_type -%}
        @RequestBody @Valid {{ endpoint.request_type }} {{ endpoint.request_param }}
        {%- endif -%}
    ) {
        {% if endpoint.request_type %}
        // 関連チェック
        {{ endpoint.request_param }}.combineCheck();

        // ユースケース実行
        final var usecaseResult = {{ endpoint.usecase_var_name }}.exec({{ endpoint.primary_field }});

        // TODO: 開発者が実装する
        // ユースケース結果からレスポンスDTOへの詰め替え処理
        final var result = new {{ endpoint.response_type }}(/* ここでusecaseResultからの詰め替えを実装 */);

        // チェック処理
        result.check();

        return result;
        {% else %}
        // TODO: 実装（リクエストボディなし）
        return ResponseEntity.ok("{{ endpoint.method_name }} is working!");
        {% endif %}
    }
{% if not loop.last %}

{% endif %}
{% endfor %}

{% for model in processed_models %}
    // {{ model.description }}
    public record {{ model.name }}(
{% for field in model.fields %}
{% for annotation in field.annotations %}
        {{ annotation }}
{% endfor %}
        {{ field.type }} {{ field.name }}{% if not loop.last %},

{% else %}

{% endif %}
{% endfor %}
    ) {
        {% if model.has_combine_check %}
        public void combineCheck() {
            // TODO: 開発者が実装する
        }
        {% endif %}
        {% if model.has_check %}
        public void check() {
            // TODO: 開発者が実装する
        }
        {% endif %}
    }

{% endfor %}

}