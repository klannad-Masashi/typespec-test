package {{ config.spring.base_package }}.controller;

import org.springframework.web.bind.annotation.*;
import javax.validation.Valid;
import java.util.List;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.LocalDate;
import java.util.UUID;

/**
 * {{ controller_name }}
 * TypeSpecから自動生成されたAPIコントローラー
 * 生成日時: {{ generated_at }}
 */
@RestController
public class {{ controller_name }} {

    private final {{ usecase_name }} {{ usecase_var_name }};

    public {{ controller_name }}({{ usecase_name }} {{ usecase_var_name }}) {
        this.{{ usecase_var_name }} = {{ usecase_var_name }};
    }

{% for endpoint in processed_endpoints %}
    @{{ endpoint.spring_method }}Mapping("{{ endpoint.path }}")
    public {{ endpoint.response_type }} {{ endpoint.method_name }}(
        {%- if endpoint.request_type -%}
        @RequestBody @Valid {{ endpoint.request_type }} {{ endpoint.request_param }}
        {%- endif -%}
    ) {
        {% if endpoint.request_type %}
        // 関連チェック
        {{ endpoint.request_param }}.combineCheck();

        // ユースケース実行
        final var usecaseResult = {{ usecase_var_name }}.exec({{ endpoint.primary_field }});

        // 後で消す（ユースケース結果の処理例）
        usecaseResult.applicationClassificationList().forEach(it -> {
            it.applicationClassificationId();
            it.applicationTypeDiv();
            it.applicationClassificationName();
            it.applicationClassificationDescription();
            it.sortControl();
            it.lastUpdateTimestamp();
        });

        final var result = {{ endpoint.result_constructor }};

        result.check();
        return result;
        {% else %}
        // TODO: 実装（リクエストボディなし）
        return ResponseEntity.ok("{{ endpoint.method_name }} is working!");
        {% endif %}
    }
{% endfor %}

{% for model in processed_models %}
    // {{ model.description }}
    public record {{ model.name }}(
{% for field in model.fields %}
{% for annotation in field.annotations %}
        {{ annotation }}
{% endfor %}
        {{ field.type }} {{ field.name }}{% if not loop.last %},
{% else %}

{% endif %}
{% endfor %}
    ) {
        {% if model.has_combine_check %}
        public void combineCheck() {
            // TODO: 開発者が実装する
        }
        {% endif %}
        {% if model.has_check %}
        public void check() {
            // TODO: 開発者が実装する
        }
        {% endif %}
    }

{% endfor %}

{% for enum in processed_enums %}
    /**
     * {{ enum.description }}
     */
    public enum {{ enum.name }} {
{% for value in enum.values %}
        {{ value.name }}("{{ value.code }}"){% if not loop.last %},{% endif %}
{% endfor %};

        private final String code;

        {{ enum.name }}(String code) {
            this.code = code;
        }

        public String getCode() {
            return code;
        }
    }

{% endfor %}
}